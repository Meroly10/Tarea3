@page "/"
@layout Layout2
@inject IJSRuntime Jsx
@inject NavigationManager Nav 

<PageTitle>Programa de ayuda</PageTitle>

<div class="container text-center">
    <div class="d-flex justify-content-center align-items-center" style="height: 300px;">
        <img src="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse1.mm.bing.net%2Fth%3Fid%3DOIP.klByMDvpHQ73UdX1AsBH0AHaEK%26pid%3DApi&f=1&ipt=621b77f22fcdbf680411154bc218ec8b2386ebf2072dfad6ff26a5a3d4ba73db&ipo=images" alt="">
    </div>
</div>

<EditForm Model="intento"  OnValidSubmit="EnviarDato">

<h1 class="d-flex justify-content-center align-items-center;" style="margin: auto; background-color: rgba(0, 0, 0, 0.030);  ">Programa de ayuda social</h1>
    <div class="row">
        <div>
            <RecomendadoEdit Modelo="intento.Recomendado" />
        </div>
    </div>

    <div class="row" style="margin: auto; background-color: rgba(0, 0, 0, 0.030); margin-top: 40px;">
     <h3 style="color: rgba(1,55,119,255)">Datos Personales</h3>
        <div class="col col-md-3">
            <label>Correo</label>
            <input class="from-control" type="email" @bind-value="intento.Correo"/>
        </div>

        <div class="col col-md-3">
            <label>Profesion</label>
            <input class="from-control" type="text" @bind-value="intento.Profesion"/>
        </div>

        <div class="col col-md-3">
            <label>Direccion</label>
            <input class="from-control" type="text" @bind-value="intento.Direccion" />
        </div>
        
        <div class="col col-md-3">
            <label>Telefono</label>
            <input class="from-control" type="text" @bind-value="intento.Telefono" />
        </div>
    </div>

@if(intento.Recomendado.Nombre.Length >2) {

    <table class="table table-striped table-bordered" style="margin: auto; background-color: rgba(0, 0, 0, 0.030); margin-top: 40px;" >
        <thead>
            <tr>
                <th><h3 style="color: rgba(1,55,119,255)">Referido </h3></th>
            </tr>
        </thead>

        <tbody>
        
         @foreach (var amigo in intento.Referencia) 
         {
            <tr><td><Prueba Modelo="amigo"/></td></tr>
            
         }
        </tbody> 
    </table>

    <div class="row" style="margin: auto; background-color: rgba(0, 0, 0, 0.030); margin-top: 40px;">
        <div class="col col-md-6">
            <label><h4 style="color: rgba(1,55,119,255)">Porque merece recibir el bono? </h4></label>
            <textarea class="form-control" @bind="intento.Motivo"></textarea>
        </div>
    </div>

    <div class="text-center">
    
    @if(errores.Count > 0) 
    {
        <div class="alert alert-danger">
            <ul>
                @foreach(var error in errores)
                {
                    <li>@error</li>
                }
            </ul>

        </div>
    }

        <button type="submit" class="btn btn-primary">
            <i class="fa fa-save"></i>
        Enviar</button>
        
    </div>
}
    <div style="height: 200px;">
    </div>

</EditForm>



@code {
    
    Aplicacion intento = new Aplicacion();

    List<string> errores = new List<string>();

    protected override void OnInitialized()
    {
        intento.Recomendado = new Recomendado();
        for (int i=0; i<5; i++) 
        {
            intento.Referencia.Add(new Recomendado());
        }
    }

    void EnviarDato() 
    {
        errores.Clear();

        if(intento.Recomendado.Nombre.Length <3) 
        {
            errores.Add("Debe tener beneficiarios validos");
        }

        if(intento.Correo.Length <3) 
        {
            errores.Add("Debe tener un correo valido");
        }

        if(intento.Direccion.Length <3) 
        {
            errores.Add("Debe tener una dirrecion valida");
        }

        if(intento.Telefono.Length <3) 
        {
            errores.Add("Debe tener un Telefono valido");
        }

        if(intento.Profesion.Length <3) 
        {
            errores.Add("Debe tener una profesion valida");
        }

        if(intento.Motivo.Length <3) 
        {
            errores.Add("Debe tener un motivo valido");
        }

        int referidoValido = 0;
        foreach (var referidos in intento.Referencia) 
        {
            if (referidos.Nombre.Length >3) 
            {
                referidoValido++;
            }
        }

        if(referidoValido < 3)
        {
            errores.Add("Debe tener por lo menos tres referidos");
        }

        if (errores.Count > 0)
        {
            return;
        }

        intento.Id = Guid.NewGuid().ToString();
        var dato = Newtonsoft.Json.JsonConvert.SerializeObject(intento);

        Console.WriteLine("Dato enviado satisfatoriamente");
        Console.WriteLine(dato);

        if (!Directory.Exists("datosx")) 
        {
            Directory.CreateDirectory("datosx");
        }

        File.WriteAllText($"datosx/{intento.Id}.json", dato);

        Jsx.InvokeVoidAsync("alert", "Se envio el formulario");
        Nav.NavigateTo("/", true);


    }

}
